{"version":3,"sources":["utils/index.js","utils/config.js","styles/CardStyles.js","components/QuizCard.js","screens/Quiz.js","components/SimpleCard.js","screens/Flash.js","App.js","index.js","web-build/register-service-worker.js"],"names":["capitalize","text","toUpperCase","substring","length","shuffle","array","sort","Math","random","filteredParts","orderOfProps","spellKeys","filter","k","includes","StyleSheet","create","cardContainer","width","height","card","backgroundColor","borderRadius","shadowColor","shadowOffset","shadowOpacity","borderColor","borderWidth","padding","card1","card2","label","lineHeight","textAlign","fontSize","fontFamily","color","prompt","fontWeight","marginBottom","textRow","textBold","marginRight","textBoldInverted","textInverted","memo","spell","keyToHide","floor","cardRef","useRef","flipCard","e","current","flip","style","styles","ref","TouchableOpacity","activeOpacity","onPress","Text","replace","toLowerCase","Object","keys","map","_","i","key","View","Quiz","spells","useState","index","setIndex","swiperRef","progress","currentSpells","slice","duration","cardStackContainer","renderNoMoreCards","onSwiped","horizontalThreshold","s","QuizCard","name","container","flex","alignItems","justifyContent","ScrollView","SimpleCard","header","marginTop","flexDirection","headerItem","paddingBottom","borderBottomWidth","borderBottomColor","activeTab","headerItemText","registerRootComponent","showQuiz","setShowQuiz","setSpells","useEffect","a","async","JSON","AsyncStorage","getItem","cachedSpells","parse","console","log","fetch","cache","then","res","json","data","setItem","stringify","catch","Error","error","getSpells","toggleView","navigator","window","addEventListener","serviceWorker","register","scope","info"],"mappings":"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","file":"static/js/app.0b3c832a.chunk.js","sourcesContent":["export function capitalize(text) {\n  return text[0].toUpperCase() + text.substring(1, text.length);\n}\n\nexport function shuffle(array) {\n  return array.sort(() => Math.random() - 0.5);\n}\n","export const filteredParts = [\"details\", \"url\"];\nexport const orderOfProps = [\n  \"name\",\n  \"school\",\n  \"level\",\n  \"castingTime\",\n  \"range\",\n  \"components\",\n  \"duration\",\n  \"details\",\n  \"url\",\n];\n// get all the property keys except for details in an array\nexport const spellKeys = orderOfProps.filter((k) => !filteredParts.includes(k));\n","import { StyleSheet } from \"react-native\";\nexport default StyleSheet.create({\n  // cards example\n  cardContainer: {\n    width: 320,\n    height: 470,\n  },\n  card: {\n    width: 320,\n    height: 500,\n    backgroundColor: \"#000\",\n    borderRadius: 5,\n    shadowColor: \"rgba(0,0,0,0.5)\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.5,\n    borderColor: \"#222\",\n    borderWidth: 1,\n    padding: \"5%\",\n  },\n  card1: {\n    backgroundColor: \"#FFF\",\n  },\n  card2: {\n    backgroundColor: \"#000\",\n  },\n  label: {\n    lineHeight: 470,\n    textAlign: \"center\",\n    fontSize: 55,\n    fontFamily: \"System\",\n    color: \"#ffffff\",\n    backgroundColor: \"transparent\",\n  },\n  prompt: {\n    textAlign: \"center\",\n    fontWeight: \"bold\",\n    fontSize: 17,\n    marginBottom: \"3%\",\n  },\n  textRow: {\n    marginBottom: \"5%\",\n  },\n  textBold: {\n    fontWeight: \"bold\",\n    fontSize: 16,\n    color: \"#222\",\n    marginRight: \"1%\",\n    marginBottom: \"1%\",\n  },\n  text: {\n    fontSize: 14,\n    color: \"#222\",\n  },\n  textBoldInverted: {\n    color: \"#FFF\",\n  },\n  textInverted: {\n    color: \"#FFF\",\n  },\n});\n","import React, { memo, useRef } from \"react\";\nimport { Text, View, TouchableOpacity } from \"react-native\";\n\nimport CardFlip from \"react-native-card-flip\";\nimport { capitalize } from \"../utils\";\nimport { spellKeys, orderOfProps, filteredParts } from \"../utils/config\";\nimport styles from \"../styles/CardStyles\";\n\nexport default memo(function Card({ ...spell }) {\n  const keyToHide = spellKeys[Math.floor(Math.random() * spellKeys.length)];\n  const cardRef = useRef(null);\n\n  const flipCard = (e) => {\n    if (cardRef.current) {\n      cardRef.current.flip();\n      //   setQuestionUp(!questionUp);\n    }\n  };\n  return (\n    <CardFlip style={styles.cardContainer} ref={cardRef}>\n      <TouchableOpacity\n        activeOpacity={1}\n        style={[styles.card, styles.card1]}\n        onPress={flipCard}\n      >\n        <Text style={styles.prompt}>\n          What is the {keyToHide.replace(/([A-Z])/g, \" $1\").toLowerCase()} of\n          this spell?\n        </Text>\n        {Object.keys(spell).map((_, i) => {\n          const key = orderOfProps[i];\n          if (key !== keyToHide && !filteredParts.includes(key)) {\n            return (\n              <View style={styles.textRow} key={key}>\n                <Text style={styles.textBold}>{capitalize(key)}: </Text>\n                <Text style={styles.text}>{spell[key]}</Text>\n              </View>\n            );\n          }\n        })}\n      </TouchableOpacity>\n      <TouchableOpacity\n        activeOpacity={1}\n        style={[styles.card, styles.card2]}\n        onPress={flipCard}\n      >\n        <View style={styles.textRow}>\n          <Text style={[styles.textBold, styles.textBoldInverted]}>\n            {capitalize(keyToHide)}:{\" \"}\n          </Text>\n          <Text style={[styles.text, styles.textInverted]}>\n            {spell[keyToHide]}\n          </Text>\n        </View>\n      </TouchableOpacity>\n    </CardFlip>\n  );\n});\n","import React, { useRef, useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport QuizCard from \"../components/QuizCard\";\nimport { filteredParts, orderOfProps, spellKeys } from \"../utils/config\";\nimport CardStack from \"react-native-card-stack-swiper\";\n\nexport default function Quiz({ spells }) {\n  const [index, setIndex] = useState(0);\n\n  const swiperRef = useRef(null);\n\n  const swipeAwayCard = () => {\n    progress();\n    swiperRef.current.swipeRight();\n  };\n\n  const progress = () => {\n    setIndex(index + 1);\n  };\n\n  // const onSwipedRight = () => {\n  //   console.log(\"right\");\n  // };\n\n  // const onSwipedLeft = () => {\n  //   console.log(\"left\");\n  // };\n\n  const renderNoMoreCards = () => (\n    <View>\n      <Text>You're all out of cards!</Text>\n    </View>\n  );\n\n  const currentSpells = spells.slice(0, index + 4);\n\n  if (spells.length !== 0) {\n    return (\n      <CardStack\n        duration={250}\n        style={styles.cardStackContainer}\n        ref={swiperRef}\n        renderNoMoreCards={renderNoMoreCards}\n        // onSwipedRight={onSwipedRight}\n        // onSwipedLeft={onSwipedLeft}\n        onSwiped={progress}\n        horizontalThreshold={50}\n      >\n        {currentSpells.map((s) => (\n          <QuizCard key={s.name} {...s} />\n        ))}\n      </CardStack>\n    );\n  }\n  // spells are loading\n  return (\n    <View style={styles.container}>\n      <Text>Loading Spells...</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  cardStackContainer: {\n    flex: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import React, { memo, useRef } from \"react\";\nimport { Text, View, TouchableOpacity, ScrollView } from \"react-native\";\n\nimport CardFlip from \"react-native-card-flip\";\nimport { capitalize } from \"../utils\";\nimport { spellKeys, orderOfProps, filteredParts } from \"../utils/config\";\nimport styles from \"../styles/CardStyles\";\n\nexport default memo(function Card({ ...spell }) {\n  const keyToHide = spellKeys[Math.floor(Math.random() * spellKeys.length)];\n  const cardRef = useRef(null);\n\n  const flipCard = (e) => {\n    if (cardRef.current) {\n      cardRef.current.flip();\n    }\n  };\n\n  return (\n    <CardFlip style={styles.cardContainer} ref={cardRef}>\n      <TouchableOpacity\n        activeOpacity={1}\n        style={[styles.card, styles.card1]}\n        onPress={flipCard}\n      >\n        {Object.keys(spell).map((_, i) => {\n          const key = orderOfProps[i];\n          if (!filteredParts.includes(key)) {\n            return (\n              <View style={styles.textRow} key={key}>\n                <Text style={styles.textBold}>{capitalize(key)}: </Text>\n                <Text style={styles.text}>{spell[key]}</Text>\n              </View>\n            );\n          }\n        })}\n      </TouchableOpacity>\n      <TouchableOpacity\n        activeOpacity={1}\n        style={[styles.card, styles.card2]}\n        onPress={flipCard}\n      >\n        <ScrollView>\n          {filteredParts.map((key) => (\n            <View key={key} style={styles.textRow}>\n              <Text style={[styles.textBold, styles.textBoldInverted]}>\n                {capitalize(key)}:\n              </Text>\n              <Text style={[styles.text, styles.textInverted]}>\n                {spell[key]}\n              </Text>\n            </View>\n          ))}\n        </ScrollView>\n      </TouchableOpacity>\n    </CardFlip>\n  );\n});\n","import React, { useRef, useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport SimpleCard from \"../components/SimpleCard\";\nimport { filteredParts, orderOfProps, spellKeys } from \"../utils/config\";\nimport CardStack from \"react-native-card-stack-swiper\";\n\nexport default function Quiz({ spells }) {\n  const [index, setIndex] = useState(0);\n\n  const swiperRef = useRef(null);\n\n  const swipeAwayCard = () => {\n    progress();\n    swiperRef.current.swipeRight();\n  };\n\n  const progress = () => {\n    setIndex(index + 1);\n  };\n\n  // const onSwipedRight = () => {\n  //   console.log(\"right\");\n  // };\n\n  // const onSwipedLeft = () => {\n  //   console.log(\"left\");\n  // };\n\n  const renderNoMoreCards = () => (\n    <View>\n      <Text>You're all out of cards!</Text>\n    </View>\n  );\n\n  const currentSpells = spells.slice(0, index + 4);\n\n  if (spells.length !== 0) {\n    return (\n      <CardStack\n        duration={250}\n        style={styles.cardStackContainer}\n        ref={swiperRef}\n        renderNoMoreCards={renderNoMoreCards}\n        // onSwipedRight={onSwipedRight}\n        // onSwipedLeft={onSwipedLeft}\n        onSwiped={progress}\n        horizontalThreshold={50}\n      >\n        {currentSpells.map((s) => (\n          <SimpleCard key={s.name} {...s} />\n        ))}\n      </CardStack>\n    );\n  }\n  // spells are loading\n  return (\n    <View style={styles.container}>\n      <Text>Loading Spells...</Text>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  cardStackContainer: {\n    flex: 5,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { StyleSheet, Text, View, TouchableOpacity } from \"react-native\";\nimport Quiz from \"./screens/Quiz\";\nimport Flash from \"./screens/Flash\";\nimport AsyncStorage from \"@react-native-community/async-storage\";\nimport { shuffle } from \"./utils\";\n\nexport default function App() {\n  const [showQuiz, setShowQuiz] = useState(false);\n  const [spells, setSpells] = useState([]);\n  const [index, setIndex] = useState(0);\n  const [questionUp, setQuestionUp] = useState(true);\n  const swiperRef = useRef(null);\n\n  const getSpells = async () => {\n    try {\n      const cachedSpells = JSON.parse(await AsyncStorage.getItem(\"SPELLS\"));\n      if (cachedSpells !== null) {\n        console.log(\"rehydrating from cache\");\n        // value previously stored\n        setSpells(shuffle(cachedSpells));\n      } else {\n        fetch(\"https://spell-scraper.now.sh/api/spells\", {\n          cache: \"force-cache\",\n        })\n          .then((res) => res.json())\n          .then((data) => {\n            setSpells(shuffle(data));\n            AsyncStorage.setItem(\"SPELLS\", JSON.stringify(data));\n          })\n          .catch((e) => {\n            console.log(new Error(e));\n          });\n      }\n    } catch (e) {\n      // error reading value\n      console.error(new Error(e));\n    }\n  };\n\n  // get spells on load\n  useEffect(() => {\n    getSpells();\n  }, []);\n\n  const toggleView = () => {\n    setShowQuiz(!showQuiz);\n    setSpells(shuffle(spells));\n  };\n  return (\n    <View style={styles.container}>\n      <View style={styles.header}>\n        <TouchableOpacity\n          onPress={toggleView}\n          style={[styles.headerItem, showQuiz ? {} : styles.activeTab]}\n        >\n          <Text style={styles.headerItemText}>Flash</Text>\n        </TouchableOpacity>\n        <TouchableOpacity\n          onPress={toggleView}\n          style={[styles.headerItem, showQuiz ? styles.activeTab : {}]}\n        >\n          <Text style={styles.headerItemText}>Quiz</Text>\n        </TouchableOpacity>\n      </View>\n      {showQuiz ? <Quiz spells={spells} /> : <Flash spells={spells} />}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  header: {\n    marginTop: \"2%\",\n    flexDirection: \"row\",\n    justifyContent: \"space-around\",\n    alignItems: \"center\",\n    width: 200,\n  },\n  headerItem: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    paddingBottom: \"2%\",\n    borderBottomWidth: 4,\n    borderBottomColor: \"transparent\",\n  },\n  activeTab: {\n    borderBottomColor: \"#000\",\n  },\n  headerItemText: {\n    color: \"#000\",\n  },\n});\n","import { registerRootComponent } from \"expo\";\n\nimport App from \"./App\";\n\n// registerRootComponent calls AppRegistry.registerComponent('main', () => App);\n// It also ensures that whether you load the app in the Expo client or in a native build,\n// the environment is set up appropriately\nregisterRootComponent(App);\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/spell-slinger/expo-service-worker.js', { scope: '/spell-slinger/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}